@page "/dogs/dogOverview/{dogID:guid}"
@using Blazored.Modal
@using Blazored.Modal.Services
@using CanineCheckup.Components.Modals
@using CanineCheckup.ViewModels.Dog
@using System.Reflection.Metadata
@inject DogOverviewViewModel m_DogOverviewViewModel;
@inject IModalService m_Model;
@inject NavigationManager m_Navigation;

<div class="row">
    <div class="col">
        <div class="d-inline-block">
            <h1>@this.m_DogOverviewViewModel.Dog.Name's Overview</h1>
        </div>
        <div class="d-inline-block float-right ms-6">
            <button @onclick="GoBack"
                    type="button"
                    class="btn btn-primary btn-sm">
                Back
            </button>
        </div>
    </div>
</div>

<div class="card mb-3">
    <div class="card-body">
        <ul class="list-unstyled">
            <li><strong>Breed:</strong> @this.m_DogOverviewViewModel.Dog.Breed</li>
            <li><strong>Date Of Birth:</strong> @this.m_DogOverviewViewModel.Dog.DateOfBirth</li>
            <li><strong>Microchip Number:</strong> @this.m_DogOverviewViewModel.Dog.MicrochipNumber</li>
            <li><strong>Sex:</strong> @this.m_DogOverviewViewModel.Dog.Sex</li>
        </ul>
    </div>
</div>

<div class="card mb-3" @onclick="ViewPhysicalActivity">
    <div class="card-body d-flex flex-column align-items-flex-start">
        <label>Physical Activity</label>
        <button type="button" class="btn btn-primary btn-sm record-activity-button">Record Activity</button>
    </div>
</div>
<div class="row justify-content-end">
    <div class="col-auto">
        <button @onclick="ShowConfirmModal"
                type="button"
                class="btn btn-danger btn-sm">
            Remove Dog
        </button>
    </div>
</div>

@code {

    [Parameter]
    public Guid dogID { get; set; }

    private void GoBack()
        => this.m_Navigation.NavigateTo("/dogs");

    protected override async Task OnInitializedAsync()
        => await m_DogOverviewViewModel.OnInitialised(dogID);

    private void RemoveDog()
    {
        this.m_DogOverviewViewModel.RemoveDog(dogID);
        this.GoBack();
    }

    private void ShowConfirmModal()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ConfirmDeleteDogModal.OnConfirm), EventCallback.Factory.Create(this, this.RemoveDog));
        var modal = m_Model.Show<ConfirmDeleteDogModal>($"Are you sure you want to remove {this.m_DogOverviewViewModel.Dog.Name}?", parameters);
    }

    private void ViewPhysicalActivity()
        => this.m_Navigation.NavigateTo("/physicalactivity");

}
